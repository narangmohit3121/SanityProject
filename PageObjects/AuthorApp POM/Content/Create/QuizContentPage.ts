import { EEXIST } from "constants";
import { ElementFinder, ElementArrayFinder, element, By } from "protractor";

export class QuizContentLocators {
    btnCreateQuiz: ElementFinder;
    addQuestion: ElementFinder;
    editQuestion1: ElementFinder;
    editQuestion2: ElementFinder;
    editQuestion3: ElementFinder;
    questionPrompt: ElementFinder;
    questionExplanation: ElementFinder;
    questionHint: ElementFinder;
    newOptionTitle: ElementFinder;
    newOptionDescription: ElementFinder;
    tabMultiselect: ElementFinder;
    addOptionMultiSelect: ElementFinder;
    increaseNumberOfCorrectAnswers: ElementFinder;
    tabRankingQuestion: ElementFinder;
    rankingOptions: ElementArrayFinder;
    tglIntroPage: ElementFinder;
    tglKTBmode: ElementFinder;
    ktbModeInfo: ElementFinder;
    ktbTimingInfo: ElementFinder;
    ktbModeInfoIcon: ElementFinder;
    ktbTimingInfoIcon: ElementFinder;
    ktbTextIntroSection: ElementArrayFinder;
    questionOrderRadioOptions: ElementArrayFinder;
    answerOrderRadioOptions: ElementArrayFinder;
    tglPassingGrade: ElementFinder;
    isPassingGradeTglChecked: ElementFinder;
    tglFeedback: ElementFinder;
    isFeedbackTglChecked: ElementFinder;
    btnIncreaseNoOfCorrectNeeded: ElementFinder;
    inputNoOfCorrectNeeded: ElementFinder;
    tglAttemptLimit: ElementFinder;
    inputAttemptsAllowed: ElementFinder;
    feedbackRadioOptions: ElementArrayFinder;
    tglShowCorrectAns: ElementFinder;
    timingRadioOptions: ElementArrayFinder;
    btnIncreaseTimingValue: ElementFinder;
    inputTimingValue: ElementFinder;
    scoringTab: ElementFinder;
    pointsWorthRadioOptions: ElementArrayFinder;
    btnDecreaseQuestionPoints: ElementFinder;
    btnIncreaseQuestionPoints: ElementFinder;
    ktbPointsInfoIcon: ElementFinder;
    gradeShownRadioOptions: ElementArrayFinder;
    summaryTab: ElementFinder;
    inputSummaryMessage: ElementFinder;
    inputPassingMessage: ElementFinder;
    inputFailingMessage: ElementFinder;
    tglSummary: ElementFinder;
    tglReview: ElementFinder;
    tglIntroPageStatus: ElementFinder;
    inputIntroPageText: ElementFinder;
    tglKTBmodeStatus: ElementFinder;
    isAttemptLimitTglChecked: ElementFinder;
    tglFeedbackChecked: ElementFinder;
    btnDecreaseNoOfCorrectNeeded: ElementFinder;
    closeKtbInfo: ElementFinder;
    inputQuestionPoints: ElementFinder;
    ktbRulesScoringRadio: ElementFinder;
    rdoSetQuestionValue: ElementFinder;
    p_quizIntroMessage: ElementArrayFinder;
    p_nextButton: ElementFinder;
    submitButton: ElementFinder;
    p_rankingQuestionInfoText: ElementFinder;
    p_rankingOptionTitles: ElementArrayFinder;
    p_rankingOptionDescriptions: ElementArrayFinder;
    p_quizTimer: ElementFinder;
    p_quesTitle: ElementFinder;
    p_currentQuesNumber: ElementFinder;
    p_rankingOptions: ElementArrayFinder;
    p_rankingOptionCount: ElementArrayFinder;
    p_quesPrompt: ElementFinder;
    p_singleSelectOptionTitles: ElementArrayFinder;
    p_singleSelectOptionDescriptions: ElementArrayFinder;
    p_hintButton: ElementFinder;
    hintText: ElementFinder;
    p_btnContinueToNextQues: ElementFinder;
    p_multiSelectOptionTitles: ElementArrayFinder;
    p_multiSelectOptionDescriptions: ElementArrayFinder;
    p_summaryMessage: ElementFinder;
    p_quizScore: ElementFinder;
    quizPassingAndScoreInfo: ElementFinder;
    p_passOrFailMessage: ElementFinder;
    p_tryAgainButton: ElementFinder;
    p_tryAgainText: ElementFinder;
    p_participantQuesSummaries: ElementArrayFinder;
    btnShowSummary: ElementFinder;
    quizActivityInJourney: ElementFinder;
    rdoFeedbackIndicatorMark: ElementFinder;
    rdoGradeShownNetPoints: ElementFinder;

    public constructor() {
        this.btnCreateQuiz = element(By.css("button[name*= 'New Quiz']"));
        this.addQuestion = element(By.css("button[name*= 'addQuestion']"));
        this.editQuestion1 = element(By.css("mat-expansion-panel:nth-child(1) button[name*= 'edit'][mattooltip]"));
        this.editQuestion2 = element(By.css("mat-expansion-panel:nth-child(2) button[name*= 'edit'][mattooltip]"));
        this.editQuestion3 = element(By.css("mat-expansion-panel:nth-child(3) button[name*= 'edit'][mattooltip]"));
        this.questionPrompt = element(By.xpath("//input[contains(@name,'Prompt')]"));
        this.questionExplanation = element(By.css("input[name*='Explanation']"));
        this.questionHint = element(By.css("input[name*='Hint']"));
        this.newOptionTitle = element(By.xpath("(//div[contains(@class,'modal-common__subcontent')])[last()]//input[@name='Answer Title']"));
        this.newOptionDescription = element(By.xpath("(//div[contains(@class,'modal-common__subcontent')])[last()]//textarea[contains(@name,'Description')]"));
        this.tabMultiselect = element(By.xpath("//div[contains(text(),'Multiple')]"));
        this.addOptionMultiSelect = element(By.css("button[name='Add Answer']"));
        this.increaseNumberOfCorrectAnswers = element(By.css("button[name='increment']"));
        this.tabRankingQuestion = element(By.xpath("//div[contains(text(),'Ranking')]"));
        this.rankingOptions = element.all(By.css("ul[class*='ranking-options'] > li"));
        this.quizActivityInJourney = element(By.xpath("//p[contains(text(),'QuizAutomation')]/ancestor::div[contains(@class,'journey-margin')]//button[contains(@name,'menu')]"));

        //Quiz Condition tab
        this.tglIntroPage = element(By.css("mat-slide-toggle[name*='Introduction'] label"));
        this.tglIntroPageStatus = element(By.css("mat-slide-toggle[name*='Introduction']"));
        this.inputIntroPageText = element(By.css("div[class*= 'fr-element']"));    
        this.tglKTBmode = element(By.css("mat-slide-toggle[name*='KTB'] label"));
        this.tglKTBmodeStatus = element(By.css("mat-slide-toggle[name*='KTB']"));
        this.ktbTextIntroSection = element.all(By.css("div[class*= 'fr-element'] ul li"));
        this.ktbModeInfoIcon = element(By.css("mat-slide-toggle[name*='KTB'] + button[name*='KTB']"));
        this.ktbModeInfo = element(By.css("div[class*='quiz-info'] p"));
        this.closeKtbInfo = element(By.css("div[class*='mat-menu-panel']"));
        this.ktbTimingInfoIcon = element(By.css("mat-radio-group[aria-label*='Timing'] + button[name*='KTB']"));
        this.ktbTimingInfo = element(By.css("div[class*='quiz-info'] p"));
        this.questionOrderRadioOptions = element.all(By.css("mat-radio-group[aria-label*= 'Question Order'] mat-radio-button span[class *= 'title']"));
        this.answerOrderRadioOptions = element.all(By.css("mat-radio-group[aria-label*= 'Answer Order'] mat-radio-button span[class *= 'title']"));
        this.tglPassingGrade = element(By.css("mat-slide-toggle[name*='Passing Grade'] label"));
        this.isPassingGradeTglChecked = element(By.css("mat-slide-toggle[name*='Passing Grade']"));
        this.tglFeedback = element(By.css("mat-slide-toggle[name*='Feedback'] label"));
        this.tglFeedbackChecked = element(By.css("mat-slide-toggle[name*='Feedback']"));
        this.feedbackRadioOptions = element.all(By.css("mat-radio-group[aria-label*= 'Feedback'] mat-radio-button span[class *= 'title']"));
        this.isFeedbackTglChecked = element(By.css("mat-slide-toggle[name*='Feedback']"));
        this.tglShowCorrectAns = element(By.css("mat-slide-toggle[name*='Correct Ans'] label"));
        this.btnIncreaseNoOfCorrectNeeded = element(By.xpath("//label[contains(text(),'Correct')]/following-sibling::div//button[contains(@name,'increment')]"));
        this.btnDecreaseNoOfCorrectNeeded = element(By.xpath("//label[contains(text(),'Correct')]/following-sibling::div//button[contains(@name,'decrement')]"));
        this.inputNoOfCorrectNeeded = element(By.xpath("//mat-label[contains(text(),'Timing')]/preceding::input[contains(@aria-label,'Min')]"));
        this.tglAttemptLimit = element(By.css("mat-slide-toggle[name*='Limit'] label"));
        this.isAttemptLimitTglChecked = element(By.css("mat-slide-toggle[name*='Limit']"));
        this.inputAttemptsAllowed = element(By.xpath("//label[contains(text(),'Attempts Allowed')]/following-sibling::div//input"));
        this.timingRadioOptions = element.all(By.css("mat-radio-group[aria-label*= 'Timing'] mat-radio-button span[class *= 'title']"));
        this.btnIncreaseTimingValue = element(By.xpath("//mat-label[contains(text(),'Timing')]/following::button[contains(@name,'increment')]"));
        this.inputTimingValue = element(By.xpath("//mat-label[contains(text(),'Timing')]/following::input[contains(@aria-label,'Min')]"));
        this.rdoFeedbackIndicatorMark = element(By.xpath("//*[contains(text(),'Indicator Mark')]/ancestor::mat-radio-button//label"));
        //Scoring Tab
        this.scoringTab = element(By.xpath("//div[contains(text(),'Scoring')]"));
        this.pointsWorthRadioOptions = element.all(By.css("mat-radio-group[name*= 'each question'] mat-radio-button span[class *= 'title']"));
        this.btnDecreaseQuestionPoints = element(By.css("button[name*='decrement']"));
        this.btnIncreaseQuestionPoints = element(By.css("button[name*='increment']"));
        this.inputQuestionPoints = element(By.css("div[class*='count-row'] input"));
        this.ktbPointsInfoIcon = element(By.css("mat-radio-group[aria-label*= 'each question'] + button"));
        this.gradeShownRadioOptions = element.all(By.css("mat-radio-group[name*= 'grade is shown'] mat-radio-button span[class *= 'title']"));
        this.ktbRulesScoringRadio = element(By.xpath("//span[contains(text(),'Ktb Rules')]/ancestor::mat-radio-button"));
        this.rdoSetQuestionValue = element(By.xpath("//span[contains(text(),'Set Value')]/ancestor::label"));
        this.rdoGradeShownNetPoints = element(By.xpath("//*[contains(text(),'points achiev')]/ancestor::mat-radio-button//label"));
        //Summary Tab
        this.summaryTab = element(By.xpath("//div[contains(text(),'Summary')]"));
        this.inputSummaryMessage = element(By.xpath("//label[contains(text(),'Summary')]/following-sibling::app-input//div[contains(@class,'fr-element')]"));
        this.inputPassingMessage = element(By.xpath("//label[contains(text(),'Passing')]/following-sibling::app-input//div[contains(@class,'fr-element')]"));
        this.inputFailingMessage = element(By.xpath("//label[contains(text(),'Failing')]/following-sibling::app-input//div[contains(@class,'fr-element')]"));
        this.tglSummary = element(By.css("mat-slide-toggle[name*='Summary'] label"));
        this.tglReview = element(By.css("mat-slide-toggle[name*='Review'] label"));

        //Participant
        this.p_quizIntroMessage = element.all(By.css("p[class *= 'summery' ] ul li,p[class *= 'summary' ] ul li"));
        this.p_nextButton = element(By.css("div[class *= 'title'] button"));
        this.submitButton = element(By.css("div[class *= 'submit'] button"));
        this.p_rankingQuestionInfoText = element(By.css("div[class *= 'content-wrap'] > p"));
        this.p_rankingOptions = element.all(By.css("div[class *= 'content-wrap'] ul li"));
        this.p_rankingOptionTitles = element.all(By.css("div[class *= 'content-wrap'] li p[class*='title']"));
        this.p_rankingOptionDescriptions = element.all(By.css("div[class *= 'content-wrap'] li p[class*='description']"));
        this.p_quizTimer = element(By.css("p[class*='quiz-navigation']"));
        this.p_currentQuesNumber = element(By.css("div[class*='activity-header'] p"));
        this.p_quesPrompt = element(By.css("p[class*='activity__title'], p[class*='single-desc']"));
        this.p_rankingOptionCount = element.all(By.css("li div[class *= 'weight']"));
        this.p_singleSelectOptionTitles = element.all(By.css("mat-radio-button span[class*='title']"));
        this.p_singleSelectOptionDescriptions = element.all(By.css("mat-radio-button p[class*='text-para']"));
        this.p_hintButton = element(By.css("div[class*='hint'] button"));
        this.hintText = element(By.css("div[class*='hint'] p"));
        this.p_btnContinueToNextQues = element(By.css("button[aria-label*='Next Question']"));
        this.p_multiSelectOptionTitles = element.all(By.css("mat-checkbox span[class*='title']"));
        this.p_multiSelectOptionDescriptions = element.all(By.css("mat-checkbox p[class*='text-para']"));
        //Quiz Review
        this.p_summaryMessage = element(By.css("p[class*='summery'] p,p[class*='summary'] p"));
        this.p_quizScore = element(By.css("p[class*='quiz-result']"));
        this.quizPassingAndScoreInfo = element(By.css("div[class*='progress-wrapper']:not([class*='score']) p:not([class])"));
        this.p_passOrFailMessage = element(By.css("div[class*='score-wrapper'] > p:nth-child(1)"));
        this.p_tryAgainButton = element(By.css("button[name*='try again']"));
        this.p_tryAgainText = element(By.css("div[class*='score-wrapper'] span"));
        this.p_participantQuesSummaries = element.all(By.css("div[class*='summary'] table:not([style]) > tr[class]"));
        this.btnShowSummary = element(By.css("button[aria-label*='Show Summary']"));

    }

}