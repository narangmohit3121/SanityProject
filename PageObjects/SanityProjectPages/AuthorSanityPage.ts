import { element, ElementFinder, ElementArrayFinder } from "protractor";
import { By } from "protractor";
import config from "../../StepDefinitions/config.json";
import sanityTestData from "../../SanityTestData.json";

export class AuthorSanityPage{
    currentImageFileName: ElementFinder;
    imageDescriptionLastPara: ElementFinder;
    imageAndTextPreviewLastPara: ElementFinder;
    deleteFirstCardBtn: ElementFinder;
    editActivitySingleSelectRadio_Short: ElementFinder;
    editActivitySingleSelectLong: ElementFinder;
    editActivitySingleSelectDD: ElementFinder;
    btnEditSingleSelect: ElementFinder;
    btnDeleteFirstOptionSS: ElementFinder;    
    btnAddNewOption: ElementFinder;
    newOptionInSSRadio_Preview: ElementFinder;
    optionsInSSPreview: ElementArrayFinder;
    firstOptionTitle: ElementFinder;
    newSingleSelectDDoption_preview: ElementFinder;
    optionsInPreviewSingleSelectDD: ElementArrayFinder;
    newOptionTitle: ElementFinder;
    newOptionDescription: ElementFinder;
    editActivityMultiSelectCheckbox: ElementFinder;
    btnEditMultiSelect: ElementFinder;
    editActivityMultiSelectLong: ElementFinder;
    editActivityMultiSelectDD: ElementFinder;
    multiLongPreviewDDArrow: ElementFinder;
    newMultiSelectDDoption_preview: ElementFinder;
    optionsInMultiDDPreview: ElementArrayFinder;
    editActivitywordcloud: ElementFinder;
    btnEditWordcloud: ElementFinder;
    btnDecreaseNumberOfWords: ElementFinder;
    btnIncreaseNumberOfWords: ElementFinder;
    currentNumberOfWords: ElementFinder;
    wordFormatUppercase: ElementFinder;
    wordFormatLowercase: ElementFinder;
    currentWordFormat: ElementFinder;
    editActivityResponseGraph: ElementFinder;
    btnEditResponseGraph: ElementFinder;
    responseGraphLabelYaxis: ElementFinder;
    responseGraphLabelXaxis: ElementFinder;
    radioBtnMomentaContentDoc: ElementFinder;
    radioBtnExternalLink: ElementFinder;
    editActivityDownload: ElementFinder;
    btnEditDownload: ElementFinder;
    uploadFileInputBox: ElementFinder;
    uploadedFileName: ElementFinder;
    externalDocumentLink: ElementFinder;
    downloadHeading: ElementFinder;
    editActivityScreenGrab: ElementFinder;
    btnEditScreenGrab: ElementFinder;
    screenGrabFileName: ElementFinder;
    editActivityVariableGrid: ElementFinder;
    btnEditVariableGrid: ElementFinder;
    btnDeleteFirstOptionVG: ElementFinder;
    deleteFirstQuestionVG: ElementFinder;
    variableGridAddOption: ElementFinder;
    variableGridAddQuestion: ElementFinder;
    newVarGridOptionText: ElementFinder;
    newVarGridQuestionTitle: ElementFinder;
    newVarGridQuestionId: ElementFinder;
    firstVarGridOption: ElementFinder;
    firstVarGridQuestion: ElementFinder;
    optionsInVarGridPreview: ElementArrayFinder;
    questionsInVarGridPreview: ElementArrayFinder;
    newOptionInVarGridPreview: ElementFinder;
    newQuestionInVarGridPreview: ElementFinder;
    editActivityParticipantRes: ElementFinder;
    btnEditParticipantRes: ElementFinder;
    toggleSettingShowExerciseLabel: ElementFinder;
    editActivityNestedContent: ElementFinder;
    btnEditNestedContent: ElementFinder;
    deleteLastTab: ElementFinder;
    btnDeleteLastTab: ElementFinder;
    btnNestedContentAddItem: ElementFinder;
    nestedContentNewTabDesc: ElementFinder;
    nestedContentNewTabHeading: ElementFinder;
    nestedContentPreviewLastTab: ElementFinder;
    nestedContentPreviewLastTabName: ElementFinder;
    nestedContentPreviewLastTabDesc: ElementFinder;
    btnDeleteNestedContentLastTab: ElementFinder;
    editActivityCustomCode: ElementFinder;
    btnEditCustomCode: ElementFinder;
    customCodeContainer: ElementFinder;
    textInCustomCodePreview: ElementFinder;
    editActivityCohortRes: ElementFinder;
    btnEditCohortRes: ElementFinder;
    titleCohortRes: ElementFinder;
    cohortResNextResponseLabel: ElementFinder;
    cohortResPreviewTitle: ElementFinder;
    cohortResPreviewNextResLabel: ElementFinder;
    newOptionInMSPreview: ElementFinder;
    optionsInMSPreview: ElementArrayFinder;
    cancelEdit: ElementFinder;
    loaderContainer: ElementFinder;
    toggleShowExerciseLabel: ElementFinder;
    //----------------------------------------------PARTICIPANT LOCATORS--------------------------

    textInputContainer: ElementFinder;
    wordsInWordcloud: ElementArrayFinder;
    selectedWordCount: ElementFinder;
    downloadBtn: ElementFinder;
    downloadTitle: ElementFinder;
    exitEditor: ElementFinder;
    codeViewButton: ElementFinder;
    inputCustomCode: ElementFinder;
    btnShowMiscButtons: ElementFinder;



    constructor(){
        this.currentImageFileName = element(By.xpath("//mat-dialog-container//div[contains(@class,'image-meta')]/span[@class='file-name']"));
        //this.imageDescriptionLastPara = element(By.xpath("//app-block-editor//div[@class='block-input text_and_image']//app-input//p[last()]"));
        this.imageDescriptionLastPara = element(By.xpath("//app-block-editor//div[@class='block-input text_and_image']//div[contains(@class,'fr-element')]//p[last()]"));
        this.imageAndTextPreviewLastPara = element(By.xpath("//mat-expansion-panel[contains(@class,'text_and_image')]//div[@class='input-container']//div[@class='fr-wrapper']//p[last()]"));
        this.deleteFirstCardBtn = element(By.xpath("(//div[contains(@class,'cardsEdit')]//button[@name='delete'])[1]"));
        this.editActivitySingleSelectRadio_Short= element(By.xpath(`//p[contains(text(),'${sanityTestData.singleSelectRadioShort}')]/../..`));
        this.editActivitySingleSelectLong= element(By.xpath(`//p[contains(text(),'${sanityTestData.singleSelectLong}')]/../..`));
        this.editActivitySingleSelectDD = element(By.xpath(`//p[contains(text(),'${sanityTestData.singleSelectDropdown}')]/../..`));
        this.btnEditSingleSelect = element(By.xpath("//button[contains(text(),'Edit Single Select')]"));
        this.btnDeleteFirstOptionSS = element(By.xpath("(//div[contains(@class,'modal-common__subcontent')])[1]/button[@name='delete']"));
        this.btnAddNewOption = element(By.css("button[name='Add Item']"));
        this.firstOptionTitle = element(By.xpath("(//div[contains(@class,'modal-common__subcontent')])[1]//input[contains(@name,'Title')]"));
        this.newOptionTitle = element(By.xpath("(//div[contains(@class,'modal-common__subcontent')])[last()]//input[@name='Item Title']"));
        this.newOptionInSSRadio_Preview = element(By.xpath("//div[contains(@class,'content_preview')]//mat-radio-group/div[last()]//span[contains(@class,'text-title')]"));
        this.optionsInSSPreview = element.all(By.xpath("//div[contains(@class,'content_preview')]//mat-radio-group/div//span[contains(@class,'text-title')]"));
        this.newSingleSelectDDoption_preview = element(By.xpath("//div[contains(@class,'content_preview')]//select/option[last()]"));
        this.optionsInPreviewSingleSelectDD = element.all(By.xpath("//div[contains(@class,'content_preview')]//select/option[position()>1]"));
        this.newOptionDescription = element(By.xpath("(//div[contains(@class,'modal-common__subcontent')])[last()]//textarea"));
        this.editActivityMultiSelectCheckbox = element(By.xpath(`//p[contains(text(),'${sanityTestData.multiSelectCheckbox}')]/../..`));
        this.editActivityMultiSelectLong = element(By.xpath(`//p[contains(text(),'${sanityTestData.multiSelectLong}')]/../..`));
        this.editActivityMultiSelectDD = element(By.xpath(`//p[contains(text(),'${sanityTestData.multiSelectDropdown}')]/../..`));
        this.btnEditMultiSelect = element(By.xpath("//button[contains(text(),'Edit Multiple Select')]"));
        this.newOptionInMSPreview = element(By.xpath("//div[contains(@class,'content_preview')]//div[contains(@class,'multiple__row content')]/div[last()]//span[contains(@class,'text-title')]"));
        this.optionsInMSPreview = element.all(By.xpath("//div[contains(@class,'content_preview')]//div[contains(@class,'multiple__row content')]/div//span[contains(@class,'text-title')]"));
        this.multiLongPreviewDDArrow = element(By.xpath("//div[contains(@class,'content_preview')]//mat-select//div[@class='mat-select-arrow']"));
        this.newMultiSelectDDoption_preview = element(By.xpath("//mat-option[last()]/mat-pseudo-checkbox/following-sibling::span"));
        this.optionsInMultiDDPreview = element.all(By.xpath("//mat-option/mat-pseudo-checkbox/following-sibling::span"));
        this.editActivitywordcloud = element(By.xpath(`//p[contains(text(),'${sanityTestData.wordcloudBlock}')]/../..`));
        this.btnEditWordcloud = element(By.xpath("//button[contains(text(),'Edit Wordcloud')]"));
        this.btnDecreaseNumberOfWords = element(By.xpath("//mat-dialog-container//button[@name='decrement']"));
        this.btnIncreaseNumberOfWords = element(By.xpath("//mat-dialog-container//button[@name='increment']"));
        this.currentNumberOfWords = element(By.xpath("//mat-dialog-container//button[@name='increment']/../preceding-sibling::div/input"));
        this.wordFormatUppercase = element(By.xpath("//mat-dialog-container//span[contains(text(),'Uppercase')]/../../.."));
        this.currentWordFormat = element(By.xpath("//mat-dialog-container//mat-radio-group[@aria-labelledBy='caseFormatting']/mat-radio-button[contains(@class,'radio-checked')]//span[contains(@class,'title')]"));
        this.wordFormatLowercase = element(By.xpath("//mat-dialog-container//span[contains(text(),'Lowercase')]/../../.."));
        this.editActivityResponseGraph = element(By.xpath(`//p[contains(text(),'${sanityTestData.responseGraphBlock}')]/../..`));
        this.btnEditResponseGraph = element(By.xpath("(//button[contains(text(),'Edit Response Graph')])[1]"));
        this.responseGraphLabelXaxis = element(By.xpath("//input[contains(@name,'X-Axis)')]"));
        this.responseGraphLabelYaxis = element(By.xpath("//input[contains(@name,'Y-Axis)')]"));
        this.editActivityDownload = element(By.xpath(`//p[contains(text(),'${sanityTestData.downloadBlock}')]/../..`));
        this.btnEditDownload = element(By.xpath("//button[contains(text(),'Edit Download')]"));
        this.radioBtnExternalLink = element(By.xpath("//mat-radio-group[@aria-labelledBy='documentId']//span[contains(text(),'External Link')]/../../.."));
        this.radioBtnMomentaContentDoc = element(By.xpath("//mat-radio-group[@aria-labelledBy='documentId']//span[contains(text(),'Content Doc')]/../../.."));
        this.uploadFileInputBox = element(By.css("#file-input"));
        this.uploadedFileName = element(By.xpath("//input[@name='Uploaded File']"));
        this.externalDocumentLink = element(By.xpath("//input[@name='Document Link']"));
        this.downloadHeading = element(By.xpath("//input[@name='Heading']"));
        this.editActivityScreenGrab = element(By.xpath(`//p[contains(text(),'${sanityTestData.screenGrabBlock}')]/../..`));
        this.btnEditScreenGrab= element(By.xpath("//button[contains(text(),'Edit Screen')]"));
        this.screenGrabFileName = element(By.xpath("//input[@name='file name']"));
        this.editActivityVariableGrid = element(By.xpath(`//p[contains(text(),'${sanityTestData.variableGridBlock}')]/../..`));
        this.btnEditVariableGrid= element(By.xpath("//button[contains(text(),'Edit Radio Button Matrix')]"));
        this.btnDeleteFirstOptionVG = element(By.xpath("(//div[contains(@class,'modal-options')]//button[@name='delete'])[1]"));
        this.deleteFirstQuestionVG = element(By.xpath("(//button[contains(text(),'Add Option')]//following::div[contains(@class,'modal-tabs__select')]/div//button[@name='delete'])[1]"));        
        this.variableGridAddOption = element(By.xpath("//button[contains(text(),'Add Option')]"));
        this.variableGridAddQuestion = element(By.xpath("//button[contains(text(),'Add Question')]"));
        this.firstVarGridOption = element(By.xpath("(//div[contains(@class,'tabs__select')]//input[@name='Option'])[1]"));
        this.newVarGridOptionText = element(By.xpath("(//div[contains(@class,'tabs__select')]//input[@name='Option'])[last()]"));
        this.newVarGridQuestionTitle = element(By.xpath("(//div[contains(@class,'tabs__select')]//input[@name='Question Title'])[last()]"));
        this.firstVarGridQuestion = element(By.xpath("(//div[contains(@class,'tabs__select')]//input[@name='Question Title'])[1]"));
        this.newVarGridQuestionId = element(By.xpath("(//div[contains(@class,'tabs__select')]//input[@name='Block Id'])[last()]"));
        this.optionsInVarGridPreview = element.all(By.xpath("//div[contains(@class,'content_preview')]//div[contains(@class,'grid-header')]/div[position()>1]"));
        this.questionsInVarGridPreview = element.all(By.xpath("//div[contains(@class,'content_preview')]//div[contains(@class,'vgrid-table')]//mat-radio-group"));
        this.newOptionInVarGridPreview = element(By.xpath("//div[contains(@class,'content_preview')]//div[contains(@class,'grid-header')]/div[last()]"));
        this.newQuestionInVarGridPreview = element(By.xpath("//div[contains(@class,'content_preview')]//div[contains(@class,'vgrid-table')]//mat-radio-group[last()]"));
        this.editActivityParticipantRes = element(By.xpath(`//p[contains(text(),'${sanityTestData.participantResponse}')]/../..`));
        this.btnEditParticipantRes= element(By.xpath("(//button[contains(text(),'Edit Participant Response')])[1]"));
        this.toggleSettingShowExerciseLabel = element(By.css("input[name='Show Exercise Label']"));   
        this.toggleShowExerciseLabel = element(By.xpath("//input[@name='Show Exercise Label']/ancestor::label[contains(@class,'slide-toggle')]"));     
        this.editActivityNestedContent = element(By.xpath(`//p[contains(text(),'${sanityTestData.nestedContentBlock}')]/../..`));
        this.btnEditNestedContent= element(By.xpath("//button[contains(text(),'Edit Nested Content')]"));
        this.btnDeleteNestedContentLastTab = element(By.xpath("(//mat-dialog-container//div[contains(@id,'cdk-drop-list')]/div)[last()]//button[@name='delete']"));
        this.btnNestedContentAddItem = element(By.xpath("//mat-dialog-container//button[@name='add item']"));
        //this.nestedContentNewTabHeading = element(By.xpath("(//mat-dialog-container//div[contains(@id,'cdk-drop-list')]/div)[last()]//div[contains(@class,'accordion__heading')]//div[@contenteditable]/div/div"));
        this.nestedContentNewTabHeading = element(By.xpath("(//mat-dialog-container//div[contains(@id,'cdk-drop-list')]/div)[last()]//div[contains(@class,'accordion__heading')]//div[@contenteditable]//p"));
        this.nestedContentNewTabDesc = element(By.xpath("(//mat-dialog-container//div[contains(@id,'cdk-drop-list')]/div)[last()]//div[contains(@class,'accordion__heading')]/following-sibling::div//div[@contenteditable]//p[last()]"));
        this.nestedContentPreviewLastTab = element(By.xpath("//mat-expansion-panel//div[contains(@class,'labels')]/div[last()]"));
        this.nestedContentPreviewLastTabName = element(By.xpath("//mat-expansion-panel//div[contains(@class,'labels')]/div[last()]//div[contains(@class,'content')]/.."));
        this.nestedContentPreviewLastTabDesc = element(By.xpath("//mat-expansion-panel//mat-tab-body//p[last()]"));
        this.editActivityCustomCode = element(By.xpath(`//p[contains(text(),'${sanityTestData.customCodeBlock}')]/../..`));
        this.btnEditCustomCode= element(By.xpath("//button[contains(text(),'Edit Custom Code')]"));
        this.customCodeContainer = element(By.xpath("//mat-dialog-container//div[contains(@class,'fr-wrapper')]/div"));
        this.inputCustomCode =element(By.xpath("//mat-dialog-container//div[contains(@class,'fr-wrapper')]//textarea"));
        this.btnShowMiscButtons = element(By.css("button[data-cmd*='Misc']"));
        this.codeViewButton = element(By.xpath("//span[contains(text(),'Code View')]/.."));
        this.textInCustomCodePreview = element(By.xpath("//mat-expansion-panel//div[contains(@class,'fr-wrapper')]//p"));
        this.editActivityCohortRes = element(By.xpath(`//p[contains(text(),'${sanityTestData.cohortResponseBlock}')]/../..`));
        this.btnEditCohortRes= element(By.xpath("//button[contains(text(),'Edit Cohort Response')]"));
        this.titleCohortRes = element(By.xpath("//input[@id='blockTitle']"));
        this.cohortResNextResponseLabel = element(By.xpath("//input[@id='nextResponse']"));
        this.cohortResPreviewTitle = element(By.xpath("//mat-expansion-panel//*[contains(@class,'activity__title')]"));
        this.cohortResPreviewNextResLabel = element(By.xpath("//mat-expansion-panel//button[contains(@name,'Another Response')]/span"));
        this.cancelEdit = element(By.xpath("//mat-dialog-container//button[@name='cancel' and not(contains(@class,'close'))]"));
        this.loaderContainer = element(By.xpath("//div[contains(@class,'loader_container')]"));
        this.exitEditor = element(By.xpath("//button[contains(text(),'EXIT')]"));
        
        //-------------------------PARTICIPANT LOCATORS-------------------------------------
        this.textInputContainer = element(By.xpath("//div[contains(@class,'itc__text')]"));
        this.wordsInWordcloud = element.all(By.xpath("//*[contains(@class,'highcharts-tracker')]/*[contains(text(),'')]"));
        this.selectedWordCount = element(By.xpath("//*[contains(@class,'highcharts-tooltip')]//*[contains(text(),'weight:')]/following-sibling::*[contains(@style,'font-weight')]"));
        this.downloadBtn = element(By.xpath("//div[contains(@class,'download-btn')]"));
        this.downloadTitle = element(By.xpath("//*[contains(@class,'download-title')]"));
        
    }
}